<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 引入配置文件:classpath等同于src目录,两种配置方式
	<context:property-placeholder location="classpath:jdbc.properties"  ignore-unresolvable="true" />
	 -->
	 <!--file:C:/conf/jdbc.properties  -->
	<context:property-placeholder location="file:${global.config.path}/jdbc_DistributionCard.properties" ignore-unresolvable="true" />
																	<!-- jdbc_test_user20190702 -->
	<context:component-scan base-package="com.vguang.service" />
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location" value="classpath:jdbc.properties"></property> </bean> -->

	<!-- 配置Redis缓存 -->
	<!-- <bean id="redisConfig" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> 
		<property name="locations" value="classpath:redis.properties"> </property> 
		</bean> -->

	<!-- 数据库连接池 -->
	<!-- <bean id="mysqlDataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="driverClassName" value="${mysql.driver}" 
		/> <property name="url" value="${mysql.url}" /> <property name="username" 
		value="${mysql.username}" /> <property name="password" value="${mysql.password}" 
		/> <property name="initialSize" value="${initialSize}"></property> <property 
		name="maxActive" value="${maxActive}"></property> <property name="maxIdle" 
		value="${maxIdle}"></property> <property name="minIdle" value="${minIdle}"></property> 
		<property name="maxWait" value="${maxWait}"></property> </bean> -->
	
	<!-- c3p0数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${mysql.driver}" />
		<property name="jdbcUrl" value="${mysql.url}" />
		<property name="user" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />

		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>20</value>
		</property>

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>100</value>
		</property>

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>20</value>
		</property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>1</value>
		</property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>




	
	<!-- org.mybatis.spring.SqlSessionFactoryBean -->
	
	<!--单数据源： Spring和myBatis整合，不再需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="com.vguang.bean.SessionBeanFactory">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:com/vguang/mapping/*.xml"></property>
	</bean>
	
	

	<!--配置扫描Dao接口包,动态实现DAO接口,注入到spring容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入SqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描的Dao接口 -->
		<property name="basePackage" value="com.vguang.dao" />
	</bean>
	
	
	
	
	
	
	<!-- 事务 -->
	<!-- 事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使自动支持事务注解 -->
	<tx:annotation-driven transaction-manager="txManager" />
	<!-- 在Service层添加事务 -->
	<context:component-scan base-package="com.vguang.service">   
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>
	
</beans>
